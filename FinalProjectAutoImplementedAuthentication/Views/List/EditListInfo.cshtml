@using FinalProjectAutoImplementedAuthentication.Models;
@model List<FinalProjectAutoImplementedAuthentication.Models.ListInfo>

@{
    ViewBag.Title = "Heading";
}

@{ List<ListInfo> listInfoData = new List<ListInfo>();
    int rowCount = (int)ViewData["rowCount"];
    int columnCount = (int)ViewData["columnCount"];
    int nameCounter = 0;
    int rowEnumerator = 0;
    int rowNumber = 0;
    int columnNumber = 0;
    int listIdChecker = (int)ViewData["listid"];
    bool noRowData = true;
    int textBoxCounter = 1;
    string searchedEmail = "";
    List<ListInfo> dataReceptacle = new List<ListInfo>();
    int rowSaver = 1;
    int columnTracker = 0; }

@ViewData["idChecker"] = @listIdChecker;

@* Finding the number of rows and columns to display *@
@*@foreach (var item in Model.UserLists)
    {
        if (item.ListId == (int)ViewData["listId"])
        {
            rowCount = item.RowCount;
            columnCount = item.ColumnCount;
        }
    }*@

@* Creating a list that contains ListInfo objects from our list only *@
@foreach (var entry in Model)
{
    if (entry.ListId == listIdChecker)
    {
        listInfoData.Add(entry);
    }
}

@{ ListInfo lastRowEntry = listInfoData.Last(); }

@if (ViewData["message"] != null)
{
    <script>
        alert('@ViewData["message"]')
    </script>
}

<h2>@ViewBag.Heading</h2>

<button class="btn btn-primary" id="share_btn" onclick="share(@listIdChecker)">Share</button>

@using (Html.BeginForm("EditListInfo", "List", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <table class="table">
        @while (rowEnumerator <= rowCount)
        {
            List<ListInfo> rowList = new List<ListInfo>();

            <tr id="row@(rowNumber) ">
                @foreach (var info in listInfoData)
                {
                    if (info.RowNum == rowNumber)
                    {
                        rowList.Add(info);
                    }

                    if (info == lastRowEntry)
                    {
                        while (columnTracker <= columnCount)
                        {
                            <td class="@(columnNumber)" style="width:auto;">
                                @{ ListInfo infoEntry = rowList.Find(x => x.ColumnNum == columnTracker); }

                                @Html.Hidden($"modelData[{nameCounter}].InfoId", infoEntry.InfoId)
                                @Html.TextBox($"modelData[{nameCounter}].ColumnData", infoEntry.ColumnData)
                                @Html.Hidden($"modelData[{nameCounter}].RowNum", infoEntry.RowNum)
                                @Html.Hidden($"modelData[{nameCounter}].ColumnNum", infoEntry.ColumnNum)
                                @Html.Hidden($"modelData[{nameCounter}].ListId", infoEntry.ListId)
                                @Html.Hidden($"modelData[{nameCounter}].IsChecked", infoEntry.IsChecked)
                            </td>
                            columnTracker++; 
                            nameCounter++;
                            columnNumber++;
                        }
                        if (columnNumber >= columnCount)
                        {
                            columnNumber = 0;
                            columnTracker = 0;
                        }
                    }
                }
            </tr>
            textBoxCounter = 1;
            columnNumber = 0;
            rowNumber++;
            rowEnumerator++;
            noRowData = true;
        }

    </table>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
} @* Closing of the Beginform method *@


<div class="modal fade" id="ShareModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 class="modal-title" id="modalTitle"></h4>
            </div>
            <div class="modal-body" id="modalbody"></div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>

<script>
    var share = function (listId) {
        var shareURL = "/List/ShareList?ListId=" + listId;
        $("#modalTitle").html("Share List");
        $("#modalbody").load(shareURL, function () {
            $("#ShareModal").modal("show");
        });
    }
</script>


@*
        @foreach (var info in Model.ListInfos)
    {
        @Html.DisplayFor(modelInfo => info.ListId)
        @Html.DisplayFor(modelInfo => info.ColumnName)
        @Html.DisplayFor(modelInfo => info.ColumnData)
        @Html.DisplayFor(modelInfo => info.RowNum)
        @Html.DisplayFor(modelInfo => info.ColumnNum)
        @Html.DisplayFor(modelInfo => info.ListId)
        @Html.DisplayFor(modelInfo => info.IsChecked)
    }


        listInfo.InfoId = info.InfoId;
        listInfo.ColumnName = info.ColumnName;
        listInfo.ColumnData = info.ColumnData;
        listInfo.RowNum = info.RowNum;
        listInfo.ColumnNum = info.ColumnNum;
        listInfo.ListId = info.ListId;
        listInfo.IsChecked = info.IsChecked;

    @for (var info = 0; info < listInfoData.Count(); info++)
                {
                    if (listInfoData[info].RowNum == rowNumber)
                    {
                        if (listInfoData[info].ColumnNum == columnNumber)
                        {
                            <td class="@(columnNumber)" style="width:auto;">
                                @Html.Hidden($"listInfoData[{info}].InfoId", listInfoData[info].InfoId)
                                @Html.EditorFor(modelInfo => info.ColumnData, "", $"row{rowNumber}" + $" column{columnNumber}")
                                @Html.EditorFor(modelInfo => info.ColumnData, "", $"listInfoData[{nameCounter}].ColumnData")*
                                @Html.TextBox($"listInfoData[{info}].ColumnData", listInfoData[info].ColumnData)
                                @Html.Hidden($"listInfoData[{info}].RowNum", listInfoData[info].RowNum)
                                @Html.Hidden($"listInfoData[{info}].ColumnNum", listInfoData[info].ColumnNum)
                                @Html.Hidden($"listInfoData[{info}].ListId", listInfoData[info].ListId)
                                @Html.Hidden($"listInfoData[{info}].IsChecked", listInfoData[info].IsChecked)
                            </td>
                            // The empty set of quotes is used to define the template name. Since I am not using a template I leave the quotes empty. The extra string at the end is used to set the name attribute for the input tag that is created through the EditorFor method. This name attribute is used to identify the data that will be transferred into the database.
                            noRowData = false;
                            columnNumber++;
                            nameCounter++;
                        }
                        if (columnNumber > columnCount)
                        {
                            columnNumber = 1;
                        }
                    }
                }


                @for (var info = 0; info < Model.Count(); info++)
            {
                if (Model[info].RowNum == rowNumber)
                {
                    if (Model[info].ColumnNum == columnNumber)
                    {
                        <td class="@(columnNumber)" style="width:auto;">
                            @Html.Hidden($"modelData[{info}].InfoId", Model[info].InfoId)
                            @Html.TextBox($"modelData[{info}].ColumnData", Model[info].ColumnData)
                            @Html.Hidden($"modelData[{info}].RowNum", Model[info].RowNum)
                            @Html.Hidden($"modelData[{info}].ColumnNum", Model[info].ColumnNum)
                            @Html.Hidden($"modelData[{info}].ListId", Model[info].ListId)
                            @Html.Hidden($"modelData[{info}].IsChecked", Model[info].IsChecked)
                        </td>
                        // The empty set of quotes is used to define the template name. Since I am not using a template I leave the quotes empty. The extra string at the end is used to set the name attribute for the input tag that is created through the EditorFor method. This name attribute is used to identify the data that will be transferred into the database.
                        noRowData = false;
                        columnNumber++;
                        nameCounter++;
                    }
                    if (columnNumber > columnCount)
                    {
                        columnNumber = 1;
                    }
                }
            }
*@
